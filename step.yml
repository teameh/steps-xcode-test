title: Xcode Test for iOS
summary: |-
  Runs Xcode's `test` action on an iOS project.
description: |-
  Runs Xcode's `test` action on an iOS project.

  Write the tests and run them on every build just to make sure those tiny code goblins didn't put something in the code that shouldn't be there while you were at the daily Scrum meeting.
website: https://github.com/bitrise-io/steps-xcode-test
source_code_url: https://github.com/bitrise-io/steps-xcode-test
support_url: https://github.com/bitrise-io/steps-xcode-test/issues
host_os_tags:
  - "osx-10.10"
project_type_tags:
  - ios
type_tags:
  - test
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  check_only:
  - name: xcode
  brew:
  - name: go
toolkit:
  go:
    package_name: github.com/bitrise-io/steps-xcode-test
inputs:
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: "Project (or Workspace) path"
      description: |-
        A `.xcodeproj` or `.xcworkspace` path, relative to the Working directory (if specified).
      is_required: true
  - scheme: $BITRISE_SCHEME
    opts:
      title: "Scheme name"
      description: |-
        The Scheme to use.

        **IMPORTANT**: The Scheme has to be marked as __shared__ in Xcode!
      is_required: true
  - simulator_device: iPhone 6s Plus
    opts:
      title: "Device"
      description: |-
        Set it as it is shown in Xcode's device selection dropdown UI.

        A couple of examples (the actual available options depend on which versions are installed):

        * iPhone 6
        * iPhone 6 Plus
        * iPad
        * iPad Air
        * Apple TV 1080p (don't forget to set the platform to `tvOS Simulator` to use this option!)
      is_required: true
  - simulator_os_version: latest
    opts:
      title: "OS version"
      description: |-
        Set it as it is shown in Xcode's device selection dropdown UI.

        A couple of format examples (the actual available options depend on which versions are installed):

        * 8.4
        * latest
      is_required: true
  - simulator_platform: iOS Simulator
    opts:
      title: Platform
      description: |-
        Set it as it is shown in Xcode's device selection dropdown UI.

        A couple of examples (the actual available options depend on which versions are installed):

        * iOS Simulator
        * tvOS Simulator
      value_options:
      - iOS Simulator
      - tvOS Simulator
      is_required: true
  - export_uitest_artifacts: "false"
    opts:
      title: Export UITest Artifacts
      description: |-
        If enabled, the attachments of the UITest will be exported into the BITRISE_DEPLOY_DIR, as a compressed ZIP file.
        Attachments include screenshots taken during the UI test, and other artifacts.
      value_options:
      - "true"
      - "false"
  - generate_code_coverage_files: "no"
    opts:
      title: "Generate code coverage files?"
      description: |-
        In case of `generate_code_coverage_files: "yes"` `xcodebuild` gets two additional flags:

        * GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES
        * GCC_GENERATE_TEST_COVERAGE_FILES=YES
      value_options:
        - "yes"
        - "no"
      is_required: true
  - verbose: "no"
    opts:
      category: Debug
      title: Enable verbose log?
      description: |-
        You can enable the verbose log for easier debugging.
      value_options:
        - "yes"
        - "no"
  - headless_mode: "yes"
    opts:
      category: Debug
      title: Run the test in headless mode?
      summary: In headless mode the simulator is not launched in the foreground.
      description: |-
        If you run your tests in headless mode the xcodebuild will start a simulator in a background.
        In headless mode the simulator will not be visible but your tests (even the screenshots) will run just like if you run a simulator in foreground.

        **NOTE:** Headless mode is available with Xcode 9.x or newer.
      value_options:
        - "yes"
        - "no"
  - workdir: $BITRISE_SOURCE_DIR
    opts:
      category: Debug
      title: "Working directory"
      description: |-
        Working directory of the step.
        You can leave it empty to leave the working directory unchanged.
  - is_clean_build: "no"
    opts:
      category: Debug
      title: "Do a clean Xcode build before testing?"
      value_options:
        - "yes"
        - "no"
      is_required: true
  - output_tool: xcpretty
    opts:
      category: Debug
      title: Output tool
      description: |-
        If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
        If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
      value_options:
      - xcpretty
      - xcodebuild
      is_required: true
  - xcodebuild_test_options: ""
    opts:
      category: Debug
      title: Additional options for `xcodebuild build test` call
      description: |-
        Options added to the end of the `xcodebuild build test` call.

        If you leave empty this input, xcodebuild will be called as:

        `xcodebuild
          -project\-workspace PROJECT.xcodeproj\WORKSPACE.xcworkspace
          -scheme SCHEME
          build test
          -destination platform=PLATFORM Simulator,name=NAME,OS=VERSION`

        In case of `generate_code_coverage_files: "yes"` `xcodebuild` gets two additional flags:

        * GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES
        * GCC_GENERATE_TEST_COVERAGE_FILES=YES

        If you want to add more options, list that separated by space character.
        Example: `-xcconfig PATH -verbose`
  - single_build: "true"
    opts:
      category: Debug
      title: "Run xcodebuild test only"
      description: |-
        If `single_build` is set to false, the step runs `xcodebuild OPTIONS build OPTIONS` before the test 
        to generate the project derived data. After that comes `xcodebuild OPTIONS build test OPTIONS`. This command's log is presented in the step's log.

        If `single_build` is set to true, then the step calls only `xcodebuild OPTIONS build test OPTIONS`.
      value_options:
      - "true"
      - "false"
  - should_build_before_test: "yes"
    opts:
      category: Debug
      title: "(Experimental) Explicitly perform a build before testing?"
      description: |-
        Previous Xcode versions and configurations may throw the error `iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.`
        when the compilation before performing the tests takes too long.

        This is fixed by running `xcodebuild OPTIONS build test OPTIONS` instead of `xcodebuild OPTIONS test OPTIONS`.
        Calling an explicit build before the test results in the code being compiled twice, thus creating an overhead.

        Unless you are sure that your configuration is not prone to this error, it is recommended to leave this option turned on.
      value_options:
        - "yes"
        - "no"
      is_required: true
  - should_retry_test_on_fail: "no"
    opts:
      category: Debug
      title: "(Experimental) Rerun test, when it fails?"
      description: |-
        If `should_retry_test_on_fail: yes` step will retry the test if first attempt failed.
      value_options:
        - "yes"
        - "no"
      is_required: true
  - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/xcode-test-results-${BITRISE_SCHEME}.html"
    opts:
      category: Debug
      title: Additional options for `xcpretty` test call
      description: |-
        Options added to the end of the `xcpretty` test call.

        If you leave empty this input, xcpretty will be called as:

        `set -o pipefail && XCODEBUILD_TEST_COMMAND | xcpretty`

        In case of leaving this input on default value:

        `set -o pipefail && XCODEBUILD_TEST_COMMAND | xcpretty --color --report html --color --report html --output "${BITRISE_DEPLOY_DIR}/xcode-test-results-${BITRISE_SCHEME}.html"

        If you want to add more options, list that separated by space character.
outputs:
- BITRISE_XCODE_TEST_RESULT:
  opts:
    title: Result of the tests. 'succeeded' or 'failed'.
    value_options:
    - succeeded
    - failed
- BITRISE_XCODE_RAW_TEST_RESULT_TEXT_PATH:
  opts:
    title: The full, raw test output file path
    description: |-
      This is the path of the raw test results log file.

      If the compilation fails this log will contain the compilation output,
      if the tests can be started it'll only include the test output.
- BITRISE_XCODE_TEST_ATTACHMENTS_PATH:
  opts:
    title: The full, test attachments zip path
    description: |-
      This is the path of the test attachments zip.
